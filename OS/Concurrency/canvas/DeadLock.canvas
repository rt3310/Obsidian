{
	"nodes":[
		{"id":"98b787ae75d2ff5e","type":"file","file":"OS/Concurrency/md/프로세스에서의 자원 이용.md","x":-324,"y":-800,"width":610,"height":465},
		{"id":"5daf3a96ffcab2be","type":"file","file":"OS/Concurrency/md/교착상태(DeadLock).md","x":-321,"y":-180,"width":604,"height":234},
		{"id":"bb79ecf4d107ab02","type":"text","text":"![[Pasted image 20231217204644.png]]","x":800,"y":-808,"width":760,"height":473},
		{"id":"813dc3b002f3155b","type":"text","text":"### 재사용 가능 자원(reusable)\n- 사용 후에도 없어지지 않는 자원\n- 프로세스에 의해 사용 후 반납해야 한다.\n- **반납이 제대로 안될 경우 교착상태**에 빠질 수 있다.\n- ex) 처리기, 입출력 채널, 주/보조 메모리, 장치, 파일, 데이터베이스, 세마포어와 같은 데이터 구조들\n\n### 소모성 자원(consumable)\n- 블록되지 않은 프로세스에 의해 필요에 따라 몇개라도 생성(produced) 되고 사용 후 사라진다(consumed).\n- **수신 primitive가 blocking 형태(받을 때까지 대기)면 교착상태**에 빠질 수 있다.\n- ex) 인터럽트, 시그널, 메시지, I/O 버퍼에 존재하는 정보","x":-1240,"y":-771,"width":588,"height":407},
		{"id":"fcedd2c481d13f5d","type":"file","file":"OS/Concurrency/md/교착상태 회피(deadlock avoidance).md","x":368,"y":960,"width":721,"height":528},
		{"id":"ef7d010769318147","type":"file","file":"OS/Concurrency/md/교착상태 발견(deadlock detection).md","x":-640,"y":1206,"width":661,"height":430},
		{"id":"99f1ddbfd95112e2","type":"file","file":"OS/Concurrency/md/교착상태 회복(recovery) 알고리즘.md","x":-596,"y":1783,"width":573,"height":513},
		{"id":"41721b30d55b13f8","type":"file","file":"OS/Concurrency/md/자원 할당 거부(은행원 알고리즘).md","x":1388,"y":1267,"width":654,"height":154},
		{"id":"9904163200f5b32a","type":"text","text":"> [!NOTE]\n> **은행원 알고리즘**\n> 고객(프로세스)은 빌리기를 원하는 총 금액까지 계속 대출을 시도하고 은행원(운영체제)은 남은 돈을 고려해 대출 요청을 거부할 수 있다.\n> 결국 은행원은 최소한 한 고객의 요구가 받아들일 수 있을 만큼의 잔고(자원)를 고려해 대출 결정(자원 할당)을 해야 한다.","x":1428,"y":1539,"width":574,"height":244},
		{"id":"008b46a7b5d469d7","type":"file","file":"OS/Concurrency/md/프로세스 시작 거부.md","x":1388,"y":1000,"width":548,"height":85},
		{"id":"34c94b03b20e5337","type":"file","file":"OS/Concurrency/md/교착상태 발견 특징.md","x":-1480,"y":1242,"width":671,"height":359},
		{"id":"7465e68683e9e0db","type":"text","text":"### 교착상태 예방(Prevent Deadlock)\n- **발생 조건 중 하나를 운영체제 설계 시에 허용하지 않는 방법**\n- 프로세스와 자원의 비효율성 초래 -> **비현실적인 방법**\n### 교착상태 회피(Avoid Deadlock)\n- 발생 조건 중 비선점, 점유대기, 상호배제는 허용하고 자원 할당 순서도 미리 정하지 않는다.\n- **자원 할당 시 교착상태가 안되도록 고려**\n- 은행원 알고리즘\n### 교착상태 발견(Detect Deadlock)\n- 교착상태가 발생했는지를 파악해서 이를 회복시키는 전략\n- 교착상태 회복 알고리즘\n- 교착상태 발견 알고리즘","x":-254,"y":280,"width":470,"height":490},
		{"id":"2d28505c11f04acb","type":"file","file":"OS/Concurrency/md/교착상태 발생 조건.md","x":479,"y":-237,"width":591,"height":349},
		{"id":"32bbda9773f86995","type":"file","file":"OS/Concurrency/md/교착상태 예방(deadlock prevention).md","x":486,"y":240,"width":629,"height":570},
		{"id":"081dee261c030069","type":"text","text":"만약 프로세스 P가 **자원 A, B를 동시에 사용하지 않는 경우는 교착상태가 발생하지 않는다**.\n![[Pasted image 20231217204742.png]]","x":858,"y":-1460,"width":645,"height":448},
		{"id":"6e2358c879a3f192","type":"file","file":"OS/Concurrency/md/교착상태 회피 단점.md","x":760,"y":1602,"width":602,"height":221},
		{"id":"4c4faff11123fa1f","type":"file","file":"OS/Concurrency/md/교착상태 회피 장점.md","x":160,"y":1602,"width":538,"height":154},
		{"id":"66855275f8fa43ca","type":"file","file":"OS/Concurrency/md/식사하는 철학자 문제.md","x":-1300,"y":-230,"width":591,"height":335}
	],
	"edges":[
		{"id":"519608cfb5f34610","fromNode":"98b787ae75d2ff5e","fromSide":"right","toNode":"bb79ecf4d107ab02","toSide":"left","label":"교착상태는 어떻게 발생하는가?"},
		{"id":"d6bfd1fae3d3086a","fromNode":"5daf3a96ffcab2be","fromSide":"top","toNode":"98b787ae75d2ff5e","toSide":"bottom","label":"프로세스에서의 자원 이용"},
		{"id":"d3df46c081e1b7d5","fromNode":"bb79ecf4d107ab02","fromSide":"top","toNode":"081dee261c030069","toSide":"bottom","label":"만약 P가 A, B를 동시에 사용하지 않는다면?"},
		{"id":"ec62317fdb2320ed","fromNode":"98b787ae75d2ff5e","fromSide":"left","toNode":"813dc3b002f3155b","toSide":"right","label":"프로세스의 자원 종류"},
		{"id":"8266b482dac076dc","fromNode":"5daf3a96ffcab2be","fromSide":"right","toNode":"2d28505c11f04acb","toSide":"left","label":"발생 조건"},
		{"id":"403318db29667dbd","fromNode":"5daf3a96ffcab2be","fromSide":"bottom","toNode":"7465e68683e9e0db","toSide":"top","label":"해결 방법"},
		{"id":"c14e8bd87d5cd968","fromNode":"7465e68683e9e0db","fromSide":"right","toNode":"32bbda9773f86995","toSide":"left","label":"교착상태 예방"},
		{"id":"08006bcc759063ab","fromNode":"7465e68683e9e0db","fromSide":"bottom","toNode":"fcedd2c481d13f5d","toSide":"left","label":"교착상태 회피"},
		{"id":"6c7af5bd3cdbc26f","fromNode":"7465e68683e9e0db","fromSide":"bottom","toNode":"ef7d010769318147","toSide":"top","label":"교착상태 발견"},
		{"id":"ee1a8f9801746f26","fromNode":"fcedd2c481d13f5d","fromSide":"right","toNode":"008b46a7b5d469d7","toSide":"left","label":"프로세스 시작 거부"},
		{"id":"4349374f6c75e079","fromNode":"fcedd2c481d13f5d","fromSide":"right","toNode":"41721b30d55b13f8","toSide":"left","label":"자원 할당 거부"},
		{"id":"e44ad10694b36f0f","fromNode":"41721b30d55b13f8","fromSide":"bottom","toNode":"9904163200f5b32a","toSide":"top","label":"은행원 알고리즘"},
		{"id":"052c0f5d2a17a794","fromNode":"fcedd2c481d13f5d","fromSide":"bottom","toNode":"4c4faff11123fa1f","toSide":"top","label":"장점"},
		{"id":"78d2ef4f8256e5c3","fromNode":"fcedd2c481d13f5d","fromSide":"bottom","toNode":"6e2358c879a3f192","toSide":"top","label":"단점"},
		{"id":"8230564c104ec791","fromNode":"ef7d010769318147","fromSide":"left","toNode":"34c94b03b20e5337","toSide":"right","label":"특징"},
		{"id":"bf17e9eacf50d9ba","fromNode":"ef7d010769318147","fromSide":"bottom","toNode":"99f1ddbfd95112e2","toSide":"top","label":"교착상태 회복"},
		{"id":"aaea33e13623ea2c","fromNode":"5daf3a96ffcab2be","fromSide":"left","toNode":"66855275f8fa43ca","toSide":"right","label":"식사하는 철학자 문제"}
	]
}