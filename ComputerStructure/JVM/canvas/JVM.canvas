{
	"nodes":[
		{"id":"d3ef9dd22b1e17e4","type":"file","file":"JVM/resources/네이티브 메소드 스택 영역.png","x":-2240,"y":1351,"width":400,"height":266},
		{"id":"195f5cb8d70245d4","type":"text","text":"일반적으로 메소드를 실행하는 경우 자바 스택에 쌓이다가 해당 메소드 내부에 네이티브 방식을 사용하는 메소드가 있다면 해당 메소드는 네이티브 스택에 쌓인다.\n그리고 네이티브 메소드 수행이 끝나면 다시 자바 스택으로 돌아와 작업을 수행한다.\n그래서 네이티브 코드로 되어 있는 함수의 호출을 자바 프로그램 내에서도 직접 수행할 수 있고 그 결과를 받아올 수도 있는 것이다.\n\n네이티브 메소드 스택은 네이티브 메소드 인터페이스(JNI)와 연결되어 있는데, JNI가 사용되면 네이티브 메소드 스택에 바이트 코드로 전환되어 저장되게 된다.","x":-1710,"y":1040,"width":892,"height":198},
		{"id":"b9db6f74b37403cb","type":"text","text":"바이트 코드 명령어를 하나씩 읽어서 해석하고 바로 실행한다\n\nJVM 안에서 바이트코드는 기본적으로 인터프리터 방식으로 동작한다. 다만 같은 메소드라도 여러번 호출이 된다면 매번 해석하고 수행해야 돼서 전체적인 속도는 느리다.","x":2242,"y":-30,"width":495,"height":159},
		{"id":"a95ad243932d7ed8","type":"text","text":"수행 과정에서 실행 엔진은 **인터프리터**와 **JIT 컴파일러** 두 가지 방식을 혼합하여 바이트 코드를 생성한다.","x":1422,"y":97,"width":435,"height":74},
		{"id":"df49775b73c7e6fa","type":"text","text":"Java에서 부모가 되는 C 언어나 C++, 어셈블리어로 구성된 코드를 의미한다.","x":3060,"y":244,"width":337,"height":85},
		{"id":"c4e313985dd7ddec","type":"text","text":"수동으로 GC를 실행하기 위해 `System.gc()`라는 메소드를 사용할 수 있지만, 함수 실제 실행은 보장되지 않는다.","x":886,"y":320,"width":462,"height":58,"color":"3"},
		{"id":"d0e55d56df237eba","type":"text","text":"- 메서드 영역에 존재하는 별도의 관리 영역\n- 각 클래스/인터페이스 마다 별도의 constant pool 테이블이 존재하는데, 클래스 생성할 때 참조해야 할 정보들을 상수로 가지고 있는 영역이다.\n- JVM은 이 Constant Pool을 통해 해당 메소드나 필드의 실제 메모리 상 주소를 찾아 참조한다.\n- 정리하면 **상수 자료형을 저장하여 참조하고 중복을 막는 역할**을 수행한다.","x":352,"y":836,"width":615,"height":190,"color":"5"},
		{"id":"2ba093b949588150","type":"text","text":"- JVM 시작 시 생성\n- 프로그램 종료 시 까지\n- 명시적으로 null 선언 시","x":1096,"y":858,"width":263,"height":96,"color":"5"},
		{"id":"8acd1aa3667b960b","type":"file","file":"JVM/resources/메소드 영역.png","x":1509,"y":1080,"width":399,"height":272},
		{"id":"3d159af86a485719","type":"text","text":"힙 영역에 생성된 객체와 배열은 Reference Type으로서, **JVM 스택 영역의 변수나 다른 객체의 필드에서 참조**된다.\n\n즉, **힙의 참조 주소는 \"스택\"이 갖고 있고 해당 객체를 통해서만 힙 영역에 있는 인스턴스를 핸들링 할 수 있는 것**이다.","x":1184,"y":1981,"width":476,"height":138},
		{"id":"66e13da091da70ba","type":"text","text":"힙 영역은 가비지 컬렉션에 대상이 되는 공간이다.\n\n만일 참조하는 변수나 필드가 없다면 의미 없는 객체가 되때문에 이것을 쓰레기로 취급하고 JVM은 쓰레기 수집기인 Garbage Collector를 실행시켜 쓰레기 객체를 힙 영역에서 자동으로 제거된다\n\n그리고 효율적인 가비지 컬렉션을 수행하기 위해서 세부적으로 5가지 영역으로 나뉘게 된다.","x":558,"y":1950,"width":536,"height":217},
		{"id":"ffdf95305f0e805d","type":"file","file":"JVM/resources/힙 영역 동작.png","x":1309,"y":2217,"width":400,"height":234},
		{"id":"7b01148d498dfcbc","type":"text","text":"다섯가지 영역(Eden, survivor 0, vurvivor 1, Old, Permanent)으로 나뉜 힙 영역은 다시 물리적으로 Young Generation과 Old Generation영역으로 구분되게 된다.\n- **Young Generation**: 생명 주기가 짧은 객체를 GC 대상으로 하는 영역\n\t- **Eden**: new를 통해 새로 생성된 객체가 위치한다. 정기적인 쓰레기 수집 후 살아남은 객체들은 Survivor로 이동한다.\n\t- **Survivor 0 / Survivor 1**: 각 영역이 채워지게 되면, 살아남은 객체는 비워진 Survivor로 순차적으로 이동한다.\n- **Old Generation**: 생명 주기가 긴 객체를 GC 대상으로 하는 영역\n\t- Young Generation에서 마지막까지 살아남은 객체가 이동한다.","x":516,"y":2334,"width":621,"height":296},
		{"id":"1bfde1282716499f","type":"file","file":"JVM/resources/힙 영역 상세.png","x":660,"y":2720,"width":400,"height":260},
		{"id":"b754bd613591aaf9","type":"text","text":"데이터의 타입에 따라 스택과 힙에 저장되는 방식이 다르다는 점을 유의해야 한다\n1. 기본(원시)타입 변수는 스택 영역에 직접 값을 가진다.\n2. 참조타입 변수는 힙 영역이나 메소드 영역에 객체 주소를 가진다.\n\n예를 들어, `Person p = new Person();`과 같이 클래스를 생성할 경우, new에 의해 생성된 클래스는 Heap Area에 저장되고, Stack Area에는 생성된 클래스의 참조인 p만 저장된다.","x":-947,"y":2044,"width":566,"height":224},
		{"id":"ce6ea10f79963c9c","type":"text","text":"스택 영역은 각 스레드마다 하나씩 존재하며, 스레드가 시작될 때 할당된다.\n프로세스가 메모리에 로드될 때 스택 사이즈가 고정되어 있어, 런타임 시에 스택 사이즈를 바꿀 수는 없다.\n만일 고정된 크기의 JVM 스택에서 프로그램 실행 중 메모리 크기가 충분하지 않다면 StackOverFlowError가 발생하게 된다.\n\n스레드를 종료하면 런타임 스택도 사라진다.","x":-881,"y":2383,"width":529,"height":198},
		{"id":"888b8d3d5c8d5763","type":"file","file":"JVM/resources/련타임 데이터 영역 동작.png","x":-842,"y":2644,"width":451,"height":289},
		{"id":"55b674cc8ebd172c","type":"file","file":"JVM/resources/스택 영역 위치.png","x":-1345,"y":2432,"width":398,"height":100},
		{"id":"3e39b980248955f1","type":"file","file":"JVM/resources/데이터 저장 방식.png","x":-1407,"y":2023,"width":400,"height":266},
		{"id":"ce4af61c386b3577","type":"text","text":"자바의 PC Register는 CPU Register와 다르다.\n자바는 OS나 CPU 입장에서는 하나의 프로세스이기 때문에 가상머신(JVM)의 리소스를 이용해야 한다.\n그래서 자바는 CPU에 직접 연산을 수행하도록 하는 것이 아닌, **현재 작업하는 내용을 CPU에게 연산으로 제공**해야 하며, 이를 위한 **버퍼 공간**으로 PC Register라는 메모리 영역을 만들게 된 것이다.\n\n따라서 JVM은 스택에서 비연산값 Operand를 봅아 별도의 메모리 공간인 PC Register에 저장하는 방식을 취한다.\n\n만약에 스레드가 자바 메소드를 수행하고 있으면 JVM 명령의 주소를 PC Register에 저장한다.\n그러다 만약 자바가 아닌 다른 언어(C, Assembly)의 메소드를 수행하고 있다면, undefined 상태가 된다.\n> 자바에서는 위 두 경우를 따로 처리하기 때문이다.\n","x":-2727,"y":1692,"width":787,"height":292},
		{"id":"31340d314cda52cd","type":"text","text":"일반적으로 프로그램의 실행은 **CPU에서 명령어(Instruction)을 수행하는 과정**으로 이루어진다.\n이때 CPU는 연산을 수행하는 동안 필요한 정보를 레지스터라고 하는 CPU 내의 기억장치를 이용하게 된다.\n\n예를 들어, A와 B라는 데이터와 피연산값인 Operand가 있고 이를 더하라는 연산 Instruction이 있다고 하자.\nA와 B, 그리고 더하라는 연산이 순차적으로 진행이 되게 되는데, 이때 A를 받고 B를 받는 동안 이 값을 CPU가 어딘가에 기억해 두어야 할 필요가 생긴다.\n이 공간이 바로 CPU 내의 기억장치 Register이다.","x":-2727,"y":2215,"width":749,"height":198},
		{"id":"25208b51c77ad118","type":"file","file":"JVM/resources/PC Register.png","x":-1910,"y":2057,"width":400,"height":257},
		{"id":"9d5ba5d1c1980574","type":"file","file":"JVM/resources/런타임 데이터 영역.png","x":-1030,"y":729,"width":501,"height":199},
		{"id":"31e61f7fa932b501","type":"text","text":"- **모든 스레드가 공유하는 영역**\n\t- Method Area, Heap Area\n- **각 스레드 마다 생성되는 개별 영역**\n\t- Stack Area, PC Register, Native Method Stack Area","x":-1279,"y":529,"width":500,"height":130},
		{"id":"d47bd8018332430c","type":"file","file":"JVM/resources/런타임 데이터 영역 상세.png","x":-1840,"y":529,"width":440,"height":369},
		{"id":"4f4c0e2543f53c43","type":"text","text":"# JVM","x":-378,"y":-356,"width":128,"height":60},
		{"id":"a97a64a6f33d7968","type":"text","text":"자바 애플리케이션을 클래스 로더를 통해 읽어 자바 API와 함께 실행하는 것","x":-315,"y":-579,"width":338,"height":63},
		{"id":"176b264d0dbd883a","type":"file","file":"JVM/resources/자바 컴파일 과정.png","x":-779,"y":-579,"width":400,"height":83},
		{"id":"535e1ea484a66304","type":"file","file":"JVM/resources/JNI.png","x":-1478,"y":-103,"width":399,"height":170},
		{"id":"bf394eddf53dea7d","type":"file","file":"JVM/resources/JVM 구조.png","x":106,"y":-1071,"width":720,"height":655},
		{"id":"4c9f05c8f005c418","type":"file","file":"JVM/JVM 구성.md","x":-120,"y":-196,"width":516,"height":444},
		{"id":"0718000f738d79d9","type":"file","file":"JVM/클래스 로더.md","x":630,"y":-360,"width":560,"height":277},
		{"id":"3b2117769e042bd3","type":"file","file":"JVM/실행 엔진.md","x":630,"y":0,"width":564,"height":259},
		{"id":"ce215a80edee9ba1","type":"file","file":"JVM/가비지 컬렉터.md","x":240,"y":347,"width":493,"height":285},
		{"id":"51fd5ac4cec88d12","type":"text","text":"Full GC가 발생하는 경우, GC를 제외한 모든 스레드가 중지되기 때문에 장애가 발생할 수 있다.","x":328,"y":740,"width":460,"height":58},
		{"id":"cd226008f0027848","type":"file","file":"JVM/런타임 데이터 영역.md","x":-349,"y":406,"width":526,"height":377},
		{"id":"4c29d91b1554c247","type":"text","text":"##### Method Area(Static)\n- JVM에서 읽어들인 클래스와 인터페이스에 대한 런타임 상수 풀, 메서드와 필드, static 변수, 메서드 바이트 코드 등을 보관\n##### Runtime Constant Pool\n- Method Area 영역에 포함되지만 독자적 중요성을 띈다.\n- 클래스 파일 constant_pool 테이블에 해당하는 영역\n- 클래스와 인터페이스 상수, 메서드와 필드에 대한 모든 레퍼런스 저장\n- JVM은 런타임 상수 풀을 통해 해당 메서드나 필드의 실제 메모리 상 주소를 찾아 참조\n##### Heap Area\n- 프로그램 상에서 데이터를 저장하기 위해 런타임 시 동적으로 할당하여 사용하는 메모리 영역\n- new 연산자를 통해 생성한 객체, 또는 인스턴스와 배열을 저장\n- JVM이 관리\n##### Stack Area\n- 선입후출(FILO)구조, 메서드 호출 시 생성되는 스레드 수행 정보를 기록하는 Frame 저장\n- 메서드 정보, 지역변수, 매개변수, 연산 중 발생하는 임시 데이터 저장\n##### PC Register\n- 현재 실행 중인 JVM 주소를 가지고 있다.\n- CPU 명령어, 즉 Instruction을 수행한다.\n- CPU Instruction을 수행하는 동안 필요한 정보를 CPU 내 기억장치인 레지스터에 저장\n- 연산 및 결과 값을 메모리에 전달하기 전 CPU 내 기억장치\n##### Native Method Stack Area\n- 자바 외 언어로 작성된 네이티브 코드를 위한 메모리\n- C/C++ 등의 코드를 수행하기 위한 스택\n- native 메서드의 매개변수, 지역변수 등을 바이트코드로 저장","x":-456,"y":928,"width":741,"height":1006},
		{"id":"19fe99f8c417fff9","type":"file","file":"JVM/메소드 영역.md","x":660,"y":1160,"width":689,"height":364},
		{"id":"65722aeb9be89e67","type":"file","file":"JVM/힙 영역.md","x":613,"y":1581,"width":781,"height":199},
		{"id":"7543b5bacea6b91e","type":"file","file":"JVM/JIT 컴파일러.md","x":2223,"y":199,"width":515,"height":179},
		{"id":"5adec4eda006335f","type":"text","text":"하나씩 인터프리팅 하여 실행하는 것이 아니라, 컴파일 된 네이티브 코드를 실행하는 것이기 때문에 전체적인 실행 속도는 인터프리팅 방식보다 빠르다.","x":2010,"y":523,"width":426,"height":94},
		{"id":"7b27ef04fd27e0aa","type":"text","text":"하지만 바이트코드를 Native Code로 변환하는 데에도 비용이 소요되므로, JVM은 모든 코드를 JIT 컴파일러 방식으로 실행하지 않고 인터프리터 방식을 사용하다 일정 기준이 넘어가면 JIT 방식으로 명령어를 실행하는 식으로 진행한다.","x":2360,"y":709,"width":479,"height":120},
		{"id":"770fb0dcc40a8fa8","type":"file","file":"JVM/스택 영역.md","x":-116,"y":2079,"width":546,"height":119},
		{"id":"562c702e6c1c7765","type":"text","text":"- 메소드가 호출될 때마다 프레임이 만들어지며, 현재 실행중인 메소드 상태 정보를 저장하는 곳이다.\n- 메소드 호출 범위가 종료되면 스택에서 제거된다.\n- 스택 프레임에 쌓이는 데이터는 메소드의 매개변수, 지역변수, 리턴 값, 연산 시 결과값 등이 있다.","x":-305,"y":2672,"width":792,"height":96,"color":"5"},
		{"id":"7944e1fd56c28a23","type":"text","text":"메소드 호출 시마다 각각의 스택 프레임(그 메서드만을 위한 공간)이 생성되고 메소드 안에서 사용되는 값들을 저장하고, 호출된 메소드의 매개변수, 지역변수, 리턴 값 및 연산 시 일어나는 값들을 임시로 저장한다.\n\n그리고 메소드 수행이 끝나면 프레임 별로 삭제한다.","x":-137,"y":2342,"width":567,"height":138},
		{"id":"39b9f6230267b129","type":"file","file":"JVM/PC 레지스터.md","x":-1471,"y":1721,"width":692,"height":119},
		{"id":"5012823f44ed9edb","type":"file","file":"JVM/네이티브 메소드 스택.md","x":-1710,"y":1370,"width":730,"height":229},
		{"id":"fb4bf774ebb65972","type":"file","file":"JVM/네이티브 메소드 인터페이스(JNI).md","x":-914,"y":-92,"width":579,"height":149},
		{"id":"5d57ff5863651eea","type":"file","file":"JVM/resources/네이티브 메소드 라이브러리.png","x":-1545,"y":109,"width":400,"height":320},
		{"id":"94a07df3ef54c898","type":"file","file":"JVM/네이티브 메소드 라이브러리.md","x":-950,"y":171,"width":494,"height":119},
		{"id":"d540b5e1d0b6bcdb","type":"file","file":"JVM/JVM 동작 과정.md","x":-1368,"y":-450,"width":776,"height":254},
		{"id":"011a37cc183cdfde","type":"file","file":"JVM/resources/JVM 수행 과정.png","x":-2160,"y":-560,"width":640,"height":477},
		{"id":"c7eb9b89a37c04d1","type":"file","file":"JVM/클래스 파일 로딩 순서.md","x":1508,"y":-390,"width":566,"height":331},
		{"id":"905090ea4f1b4cf7","type":"text","text":"일반적으로 자동으로 실행되지만, GC가 실행되는 시간은 정해져 있지 않다.","x":860,"y":475,"width":534,"height":29},
		{"id":"81fa5444fbbd484d","type":"file","file":"JVM/resources/힙 영역 저장 타입.png","x":1660,"y":1476,"width":400,"height":205},
		{"id":"e5071ec2e6b8fe94","type":"text","text":"- 객체가 더 이상 사용되지 않거나 명시적으로 null 선언 시\n- GC 대상","x":1758,"y":1780,"width":300,"height":94,"color":"5"},
		{"id":"5b4535493b0ec7ea","type":"file","file":"JVM/resources/자바 실행 엔진.png","x":1422,"y":287,"width":575,"height":637}
	],
	"edges":[
		{"id":"f019c3748c0f6840","fromNode":"4f4c0e2543f53c43","fromSide":"top","toNode":"a97a64a6f33d7968","toSide":"bottom","label":"역할"},
		{"id":"cc9c233a29ae2ac9","fromNode":"4f4c0e2543f53c43","fromSide":"top","toNode":"176b264d0dbd883a","toSide":"bottom"},
		{"id":"00c625bad45ba461","fromNode":"4f4c0e2543f53c43","fromSide":"left","toNode":"d540b5e1d0b6bcdb","toSide":"right","label":"동작 과정"},
		{"id":"e484dc33528fb793","fromNode":"d540b5e1d0b6bcdb","fromSide":"left","toNode":"011a37cc183cdfde","toSide":"right"},
		{"id":"e14a40a340159bc6","fromNode":"4f4c0e2543f53c43","fromSide":"right","toNode":"4c9f05c8f005c418","toSide":"top","label":"구조"},
		{"id":"60280aa8d50e7d42","fromNode":"4c9f05c8f005c418","fromSide":"top","toNode":"bf394eddf53dea7d","toSide":"bottom"},
		{"id":"b9b448aea54377e6","fromNode":"4c9f05c8f005c418","fromSide":"right","toNode":"0718000f738d79d9","toSide":"left","label":"클래스 로더?"},
		{"id":"f708fdf7702e1915","fromNode":"0718000f738d79d9","fromSide":"right","toNode":"c7eb9b89a37c04d1","toSide":"left","label":"클래스 파일 로딩 순서"},
		{"id":"ed047ed77dfd65a9","fromNode":"4c9f05c8f005c418","fromSide":"right","toNode":"3b2117769e042bd3","toSide":"left","label":"실행 엔진?"},
		{"id":"0198de251db56883","fromNode":"3b2117769e042bd3","fromSide":"right","toNode":"a95ad243932d7ed8","toSide":"left","label":"수행 방식"},
		{"id":"4f5cef86208d053e","fromNode":"a95ad243932d7ed8","fromSide":"bottom","toNode":"5b4535493b0ec7ea","toSide":"top"},
		{"id":"e656fd02baf5efc1","fromNode":"a95ad243932d7ed8","fromSide":"right","toNode":"b9db6f74b37403cb","toSide":"left","label":"인터프리터?"},
		{"id":"abd893aa5d0ef5ce","fromNode":"a95ad243932d7ed8","fromSide":"right","toNode":"7543b5bacea6b91e","toSide":"left","label":"JIT 컴파일러?"},
		{"id":"f5e7d28527e343be","fromNode":"7543b5bacea6b91e","fromSide":"bottom","toNode":"5adec4eda006335f","toSide":"top","label":"장점"},
		{"id":"30d799226af1da3f","fromNode":"7543b5bacea6b91e","fromSide":"bottom","toNode":"7b27ef04fd27e0aa","toSide":"top","label":"JIT 컴파일 기준"},
		{"id":"c598247cbc85a03b","fromNode":"7543b5bacea6b91e","fromSide":"right","toNode":"df49775b73c7e6fa","toSide":"left","label":"네이티브 코드?"},
		{"id":"8d078e66893a1a63","fromNode":"5adec4eda006335f","fromSide":"bottom","toNode":"7b27ef04fd27e0aa","toSide":"top"},
		{"id":"4b8d9a9d894b6101","fromNode":"4c9f05c8f005c418","fromSide":"bottom","toNode":"ce215a80edee9ba1","toSide":"top","label":"가비지 컬렉터?"},
		{"id":"888992d33f88dba0","fromNode":"ce215a80edee9ba1","fromSide":"right","toNode":"905090ea4f1b4cf7","toSide":"left","label":"동작"},
		{"id":"47b28ba8661b9cde","fromNode":"ce215a80edee9ba1","fromSide":"bottom","toNode":"51fd5ac4cec88d12","toSide":"top","label":"주의"},
		{"id":"a01ba8b6d7184954","fromNode":"905090ea4f1b4cf7","fromSide":"top","toNode":"c4e313985dd7ddec","toSide":"bottom","label":"Tip"},
		{"id":"11e41341784c5eb9","fromNode":"4c9f05c8f005c418","fromSide":"bottom","toNode":"cd226008f0027848","toSide":"top","label":"런타임 데이터 영역?"},
		{"id":"adfe9cb5d86fc73f","fromNode":"cd226008f0027848","fromSide":"left","toNode":"9d5ba5d1c1980574","toSide":"right"},
		{"id":"e05575ca281850e4","fromNode":"cd226008f0027848","fromSide":"bottom","toNode":"4c29d91b1554c247","toSide":"top","label":"런타임 영역 상세 구성"},
		{"id":"145430b45de6c853","fromNode":"cd226008f0027848","fromSide":"left","toNode":"31e61f7fa932b501","toSide":"right","label":"스레드 간 공유"},
		{"id":"05ec1ff6ca04f5a7","fromNode":"31e61f7fa932b501","fromSide":"left","toNode":"d47bd8018332430c","toSide":"right"},
		{"id":"745019fd9c543d41","fromNode":"4c29d91b1554c247","fromSide":"right","toNode":"19fe99f8c417fff9","toSide":"left","label":"메소드 영역?"},
		{"id":"af240b75f0173c37","fromNode":"19fe99f8c417fff9","fromSide":"right","toNode":"8acd1aa3667b960b","toSide":"left"},
		{"id":"4cac841b4b46c83a","fromNode":"19fe99f8c417fff9","fromSide":"top","toNode":"2ba093b949588150","toSide":"bottom","label":"사용 기간"},
		{"id":"07a93837aa9be830","fromNode":"19fe99f8c417fff9","fromSide":"top","toNode":"d0e55d56df237eba","toSide":"bottom","label":"Runtime Constant Pool"},
		{"id":"e782d10a68b9a1c0","fromNode":"4c29d91b1554c247","fromSide":"right","toNode":"65722aeb9be89e67","toSide":"left","label":"힙 영역?"},
		{"id":"ed477188c62d1bf2","fromNode":"65722aeb9be89e67","fromSide":"right","toNode":"81fa5444fbbd484d","toSide":"left"},
		{"id":"6b5116a119eed418","fromNode":"65722aeb9be89e67","fromSide":"right","toNode":"e5071ec2e6b8fe94","toSide":"left","label":"사용 기간"},
		{"id":"32181a88555bb027","fromNode":"65722aeb9be89e67","fromSide":"bottom","toNode":"3d159af86a485719","toSide":"top","label":"유의할 점"},
		{"id":"af848b343fd08ba4","fromNode":"3d159af86a485719","fromSide":"bottom","toNode":"ffdf95305f0e805d","toSide":"top"},
		{"id":"7b87df849b35d2ae","fromNode":"65722aeb9be89e67","fromSide":"bottom","toNode":"66e13da091da70ba","toSide":"top","label":"힙 영역 가비지 컬렉션"},
		{"id":"58440c8cfc795b79","fromNode":"66e13da091da70ba","fromSide":"bottom","toNode":"7b01148d498dfcbc","toSide":"top","label":"힙 영역의 5가지 영역"},
		{"id":"faa6abf07e8562fa","fromNode":"7b01148d498dfcbc","fromSide":"bottom","toNode":"1bfde1282716499f","toSide":"top"},
		{"id":"c57238c4224889fe","fromNode":"4c29d91b1554c247","fromSide":"bottom","toNode":"770fb0dcc40a8fa8","toSide":"top","label":"스택 영역?"},
		{"id":"85895bdecd230928","fromNode":"770fb0dcc40a8fa8","fromSide":"bottom","toNode":"7944e1fd56c28a23","toSide":"top","label":"동작"},
		{"id":"244b8fac92e5dc06","fromNode":"7944e1fd56c28a23","fromSide":"bottom","toNode":"562c702e6c1c7765","toSide":"top","label":"스택 프레임?"},
		{"id":"d64cbf954c6c09ee","fromNode":"770fb0dcc40a8fa8","fromSide":"left","toNode":"b754bd613591aaf9","toSide":"right","label":"유의할 점"},
		{"id":"20cd123337be8da0","fromNode":"b754bd613591aaf9","fromSide":"left","toNode":"3e39b980248955f1","toSide":"right"},
		{"id":"1f33ccd61fee5f1f","fromNode":"770fb0dcc40a8fa8","fromSide":"left","toNode":"ce6ea10f79963c9c","toSide":"right","label":"라이프 사이클"},
		{"id":"ed55c5c4574e2edb","fromNode":"ce6ea10f79963c9c","fromSide":"left","toNode":"55b674cc8ebd172c","toSide":"right"},
		{"id":"3d9b679b48074d20","fromNode":"ce6ea10f79963c9c","fromSide":"bottom","toNode":"888b8d3d5c8d5763","toSide":"top"},
		{"id":"bd3af184d1fc1a05","fromNode":"4c29d91b1554c247","fromSide":"left","toNode":"39b9f6230267b129","toSide":"right","label":"PC 레지스터?"},
		{"id":"53c41534fc6bbd1a","fromNode":"ce4af61c386b3577","fromSide":"bottom","toNode":"31340d314cda52cd","toSide":"top","label":"CPU Register?"},
		{"id":"d870079d727722ed","fromNode":"39b9f6230267b129","fromSide":"left","toNode":"ce4af61c386b3577","toSide":"right","label":"PC Register vs CPU Register"},
		{"id":"28bd379e786e7ef2","fromNode":"39b9f6230267b129","fromSide":"bottom","toNode":"25208b51c77ad118","toSide":"top"},
		{"id":"8f8cb24a98cfd885","fromNode":"4c29d91b1554c247","fromSide":"left","toNode":"5012823f44ed9edb","toSide":"right","label":"네이티브 메소드 스택?"},
		{"id":"de2c3e3937d23d89","fromNode":"5012823f44ed9edb","fromSide":"left","toNode":"d3ef9dd22b1e17e4","toSide":"right"},
		{"id":"2e169fb22b00b31c","fromNode":"5012823f44ed9edb","fromSide":"top","toNode":"195f5cb8d70245d4","toSide":"bottom","label":"동작"},
		{"id":"6c4f116c1113df76","fromNode":"4c9f05c8f005c418","fromSide":"left","toNode":"fb4bf774ebb65972","toSide":"right","label":"JNI?"},
		{"id":"08d476dd8b411e41","fromNode":"fb4bf774ebb65972","fromSide":"left","toNode":"535e1ea484a66304","toSide":"right"},
		{"id":"a94cad6ec1582406","fromNode":"4c9f05c8f005c418","fromSide":"left","toNode":"94a07df3ef54c898","toSide":"right","label":"네이티브 메소드 라이브러리?"},
		{"id":"dedec5d046364b45","fromNode":"94a07df3ef54c898","fromSide":"left","toNode":"5d57ff5863651eea","toSide":"right"}
	]
}