{
	"nodes":[
		{"id":"d0073da8fb9ec9c6","type":"file","file":"DB/SQL/반복계의 단점.md","x":120,"y":-304,"width":556,"height":151},
		{"id":"a3e8dfd90e9305e5","type":"text","text":"# 반복계","x":-280,"y":-364,"width":250,"height":60},
		{"id":"111eaf1956dadc82","type":"text","text":"- 실행 계획의 안정성\n- 예상 처리 시간의 정밀도\n- 트랜잭션 제어가 편리","x":122,"y":-560,"width":554,"height":171},
		{"id":"dee0d4374ec7cbb0","type":"file","file":"DB/SQL/결합 알고리즘 종류.md","x":-144,"y":385,"width":429,"height":329},
		{"id":"4388858d55e561aa","type":"text","text":"# 결합","x":-580,"y":520,"width":250,"height":60},
		{"id":"3a31f4fdb2fc520a","x":440,"y":379,"width":666,"height":342,"type":"file","file":"DB/SQL/Nested Loops.md"},
		{"id":"01304f18aa6c99ac","type":"file","file":"DB/SQL/반복계가 포장계에 성능적으로 질 수 밖에 없는 이유.md","x":940,"y":-1140,"width":657,"height":1084},
		{"id":"5af13ca78b01043d","x":1340,"y":86,"width":700,"height":464,"type":"file","file":"DB/SQL/구동 테이블의 중요성.md"},
		{"id":"f0eba82ecd5cfcfb","x":1340,"y":620,"width":825,"height":728,"type":"text","text":"'구동 테이블이 작은 Nested Loops' + '내부 테이블의 결합 키에 인덱스'라는 조합만 있다면 성능은 충분하다고 생각할 수 있다. 하지만 기대만큼의 응답 시간이 나오지 않기도 한다.\n\n**보통 이런 경우는 결합 키로 내부 테이블에 접근할 대 히트되는 레코드가 너무 많기 때문**이다. 이는 앞에서 설명했던 **결합키가 내부 테이블에 대해 유일하지 않은 경우**에 발생할 수 있다. 여러가지 방법으로 인덱스를 사용해 반복을 생략할 수 있다고 해도, 결국 절대적인 양이 너무 많으면 반복이 많이 일어난다.\n\n예를 들어 점포 테이블과 점포에서 받은 주문 테이블을 생각해보자. 이런 경우 하나의 점포에 대해 여러 개의 주문이 대응하므로 점포 테이블이 당연히 작을 것이다. 따라서 점포 테이블을 구동 테이블로 만들고 점포 ID를 결합 키로 사용하면 될 것이다.\n여기까지는 굉장히 좋은 생각이지만, 한 개의 점포 ID에 수백만 건, 수천만 건의 레코드가 히트된다면 결국 내부 테이블에 대해 반복 횟수가 많아져서 Nested Loops 성능이 낮아진다.\n\n이 문제에 대처하는 방법은 두 가지이다.\n\n첫 번째는 **구동 테이블로 큰 테이블을 선택**하는 역설적인 방법이다.\n이렇게 하면 내부 테이블에 대한 점포 테이블의 접근이 기본 키(점포 ID)로 수행되므로, 항상 하나의 레코드로 접근하는 것이 보장된다.\n따라서 점포에 따른 성능 비균등 문제를 해결해서, 극단적으로 성능이 저하되는 것을 막을 수 있다. 이는 주문 테이블이라는 거대 테이블 접근 비용이 현실적인 범위라면 굉장히 효과적인 방법이다.\n\n두번째는 해시이다."},
		{"id":"ab6ffcea0a9f3a1c","x":440,"y":1380,"width":638,"height":444,"type":"file","file":"DB/SQL/Hash.md"},
		{"id":"1429de098de68a9a","x":1240,"y":1440,"width":652,"height":244,"type":"file","file":"DB/SQL/Hash가 유용한 경우.md"},
		{"id":"538cec540c8f50b2","x":1240,"y":1740,"width":652,"height":352,"type":"file","file":"DB/SQL/Hash 트레이드오프.md"},
		{"id":"161c8af1f9cd0114","x":476,"y":2180,"width":602,"height":342,"type":"text","text":"Sort Merge는 결합 대상 테이블을 각각 결합 키로 정렬하고 일치하는 결합 키를 찾으면 결합한다.\n\n- 특징\n\t- 대상 테이블을 모두 정렬해야 하므로 Nested Loops보다 많은 메모리를 소비한다. Hash와 비교하면 규모에 따라 다르지만 Hash는 한쪽 테이블에 대해서만 해시 테이블을 만드므로 Hash보다 많은 메모리를 사용하기도 한다.\n\t- Hash와 다르게 동치 결합뿐만 아니라 부등오를 사용한 결합에도 사용할 수 있다. 하지만 부정 조건(<>) 결합에는 사용할 수 없다.\n\t- 원리적으로는 테이블이 결합 키로 정렬되어 있다면 정렬을 생략할 수 있다. 다만 이는 SQL에서 테이블에 있는 레코드의 물리적인 위치를 알고 있을 때이다. 따라서 이러한 생략은 구현 의존적이다."},
		{"id":"e69218dd32ad90c3","x":1356,"y":2320,"width":624,"height":300,"type":"text","text":"Sort Merge 결합 자체에 걸리는 시간은 결합 대상 레코드 수가 많더라도 나쁘지 않은 편이지만, 테이블 정렬에 많은 시간과 리소스를 요구할 가능성이 있다.ㅇ\n따라서 테이블 정렬을 생략할 수 있는(상ㄷ)"}
	],
	"edges":[
		{"id":"c7c4aa7e9ce897d8","fromNode":"a3e8dfd90e9305e5","fromSide":"right","toNode":"d0073da8fb9ec9c6","toSide":"left"},
		{"id":"0f5bfee24964da42","fromNode":"d0073da8fb9ec9c6","fromSide":"right","toNode":"01304f18aa6c99ac","toSide":"left"},
		{"id":"5c6d23abcc6d3680","fromNode":"a3e8dfd90e9305e5","fromSide":"right","toNode":"111eaf1956dadc82","toSide":"left"},
		{"id":"2d2bdd60e915694c","fromNode":"4388858d55e561aa","fromSide":"right","toNode":"dee0d4374ec7cbb0","toSide":"left"},
		{"id":"e5c4e5c8173ac307","fromNode":"dee0d4374ec7cbb0","fromSide":"right","toNode":"3a31f4fdb2fc520a","toSide":"left"},
		{"id":"58f2587be0279e0b","fromNode":"3a31f4fdb2fc520a","fromSide":"right","toNode":"5af13ca78b01043d","toSide":"left"},
		{"id":"5f5fbfb5ad283caa","fromNode":"3a31f4fdb2fc520a","fromSide":"right","toNode":"f0eba82ecd5cfcfb","toSide":"left"},
		{"id":"98e53b7f2135311f","fromNode":"dee0d4374ec7cbb0","fromSide":"right","toNode":"ab6ffcea0a9f3a1c","toSide":"left"},
		{"id":"620aeabb444e7d5d","fromNode":"ab6ffcea0a9f3a1c","fromSide":"right","toNode":"1429de098de68a9a","toSide":"left"},
		{"id":"9ff6ae8fa5037a87","fromNode":"ab6ffcea0a9f3a1c","fromSide":"right","toNode":"538cec540c8f50b2","toSide":"left"},
		{"id":"0c141e61c64eae4d","fromNode":"dee0d4374ec7cbb0","fromSide":"right","toNode":"161c8af1f9cd0114","toSide":"left"},
		{"id":"1b1f0e123d7aeea7","fromNode":"161c8af1f9cd0114","fromSide":"right","toNode":"e69218dd32ad90c3","toSide":"left"}
	]
}