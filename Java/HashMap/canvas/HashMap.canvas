{
	"nodes":[
		{"id":"2a7a1b3281fd1480","type":"file","file":"Java/HashMap/canvas/HashMap vs HashTable.md","x":-260,"y":-120,"width":740,"height":490},
		{"id":"be4544eef9902c1f","type":"file","file":"Java/HashMap/canvas/해시 분포.md","x":638,"y":-38,"width":584,"height":688},
		{"id":"9012425bebf07ff7","type":"text","text":"```java\nint index = X.hashCode() % M;\n```\n이 코드와 같은 방식을 사용하면, 서로 다른 해시 코드를 가지는 서로 다른 객체가 1/M의 확률로 같은 해시 버킷을 사용하게 된다. 이는 해시 함수가 얼마나 해시 충돌을 회피하도록 잘 구현되었느냐에 상관없이 발생할 수 있는 또 다른 종류의 해시 충돌이다.\n이렇게 해시 충돌이 발생하더라도 키-값 쌍 데이터를 잘 저장하고 조회할 수 있게 하는 방식에는 대표적으로 두 가지가 있다.\n- Open Addressing\n- Separate Chaining\n\n이 둘 외에도 해시 충돌을 해결하기 위한 다양한 자료 구조가 있지만, 거의 모두 이 둘을 응용한 것이라고 할 수 있다.\n\n![[Pasted image 20240313181553.png]]","x":1400,"y":-38,"width":633,"height":823}
	],
	"edges":[
		{"id":"f2e5993fcf00241a","fromNode":"2a7a1b3281fd1480","fromSide":"right","toNode":"be4544eef9902c1f","toSide":"left"},
		{"id":"90b35b2135cfab1b","fromNode":"be4544eef9902c1f","fromSide":"right","toNode":"9012425bebf07ff7","toSide":"left"}
	]
}