{
	"nodes":[
		{"id":"13582db3306434c4","type":"text","text":"# 가상 스레드","x":-580,"y":-72,"width":187,"height":39},
		{"id":"f80abc9c65f007fd","type":"file","file":"Java/Virtual Thread/resources/Virtual Thread 비교.png","x":-945,"y":-772,"width":552,"height":359},
		{"id":"38d1d9b9473c6055","type":"text","text":"기존의 전통적인 Java 스레드에 더하여 새롭게 추가되는 경량 스레드이다. `Project Loom`의 결과물로 추가된 기능으로 OS 스레드를 그대로 사용하지 않고 JVM 자체적으로 내부 스케줄링을 통해서 사용할 수 있는 경량의 스레드를 제공한다.\n하나의 Java 프로세스가 수십만 ~ 수백만개의 스레드를 동시에 실행할 수 있게끔 설계되었다.","x":-89,"y":-113,"width":637,"height":118},
		{"id":"64f9b9ea9c4f8bd2","type":"text","text":"Project Loom이란 경량의 스레드를 Java의 추가하기 위해서 가상 스레드를 비롯한 여러가지 기능들을 개발하는 프로젝트로 Loom이란 단어는 Thread의 사전적 정의가 **실**이라는데 착안하여 실을 엮어 **직물을 만든다는 뜻**이다.\nLoom 프로젝트의 결과로 탄생한 Virtual Thread도 처음에는 Fiber-섬유 라고하는 별도의 기능으로 개발되었으나, 최종적으로는 기존 스레드 문법과 호환될 수 있는 형태로 발전했다.","x":-83,"y":180,"width":626,"height":147},
		{"id":"1ae24fd0cf409247","type":"text","text":"Project Loom의 결과로 탄생한 가상 스레드는 다음과 같은 목적으로 가지고 있는데, 기존의 Reactive Programming과 비교해서 생각해보자.\n\n#### 해결하고자 하는 문제\n1. Java 개발자가 하드웨어의 성능을 잘 활용하는 높은 처리량(throughput)의 서버를 작성하는 것\n\t1. 가상 스레드는 Blocking이 발생하면 내부적으로 스케줄링을 활용하여 플랫폼 스레드가 그냥 대기하게 두지 않고 다른 가상 스레드가 작업할 수 있도록 한다.\n\t2. 따라서 Reactive Programming의 Non-blocking과 동일하게 플랫폼 스레드의 리소스를 낭비하지 않는다.\n2. 동시에 Java 플랫폼의 디자인과 조화를 이루는 코드를 생성할 수 있도록 하는 것\n\t1. 기존 Reactive Programming의 장점에도 불구하고 전통적인 Java 언어의 구조는 스레드를 기반으로 하였기 때문에 Webflux 등을 사용할 때 디버깅, 성능 테스트가 어려웠다.\n\t2. 하지만 가상 스레드는 기존 스레드 구조를 그대로 사용하기 때문에 디버깅, 프로파일링 등 기존의 도구도 그대로 사용할 수 있다.\n#### Reactive Programming 과의 비교\n- Reactive Programming이 달성하고자 하는, 리소스를 효율적으로 사용하여 높은 처리량을 감당하려는 목적은 동일하다.\n- 가상 스레드를 사용하면 Non-blocking에 대한 처리를 JVM 레벨에서 담당해준다.\n- 따라서 Spring Web MVC 스타일로 코드를 작성하더라고 내부에서 가상 스레드가 기존의 플랫폼 스레드를 직접 사용하는 방식보다 효율적으로 스케줄링하여 처리량을 높일 수 있다.\n- 결론적으로 가상 스레드는 기존 스레드 방식의 이점을 누리면서도 Reactive Programming의 장점을 취할 수 잇다.","x":-120,"y":-940,"width":700,"height":694},
		{"id":"c33f8838d83b4ba7","type":"file","file":"Java/Virtual Thread/canvas/Virtual Thread가 나오게 된 배경.md","x":865,"y":-784,"width":800,"height":1157},
		{"id":"709f8c640ea77aca","type":"file","file":"Java/Virtual Thread/canvas/플랫폼 스레드와 가상 스레드 구조 차이.md","x":-826,"y":160,"width":680,"height":1597},
		{"id":"7c8bbab242e2c818","type":"file","file":"Java/Virtual Thread/canvas/Virtual Thread 사용 자원 차이.md","x":-806,"y":1920,"width":640,"height":205},
		{"id":"dbbe198c92c80787","x":-1840,"y":-320,"width":871,"height":960,"type":"text","text":"### 준비\n- Java 21 설치\n```shell\nsdk install java 21.ea.18-open\n```\n"}
	],
	"edges":[
		{"id":"4ca44f4b7aa79f2c","fromNode":"13582db3306434c4","fromSide":"right","toNode":"38d1d9b9473c6055","toSide":"left","label":"가상 스레드?"},
		{"id":"7830d41e7ce55a05","fromNode":"38d1d9b9473c6055","fromSide":"bottom","toNode":"64f9b9ea9c4f8bd2","toSide":"top","label":"Loom Project?"},
		{"id":"fc291d0b1b110c32","fromNode":"38d1d9b9473c6055","fromSide":"right","toNode":"c33f8838d83b4ba7","toSide":"left","label":"나오게 된 배경"},
		{"id":"a9180f986e940cbf","fromNode":"38d1d9b9473c6055","fromSide":"top","toNode":"1ae24fd0cf409247","toSide":"bottom","label":"해결하고자 하는 문제"},
		{"id":"7670ae461b56d018","fromNode":"1ae24fd0cf409247","fromSide":"left","toNode":"f80abc9c65f007fd","toSide":"right"},
		{"id":"6c448afa4cee513e","fromNode":"13582db3306434c4","fromSide":"bottom","toNode":"709f8c640ea77aca","toSide":"top","label":"구조"},
		{"id":"3478e7eb20f62cb8","fromNode":"709f8c640ea77aca","fromSide":"bottom","toNode":"7c8bbab242e2c818","toSide":"top"},
		{"id":"af5cbb367d208c4d","fromNode":"13582db3306434c4","fromSide":"left","toNode":"dbbe198c92c80787","toSide":"right"}
	]
}