{
	"nodes":[
		{"id":"118349ead357f16c","type":"text","text":"가비지 컬렉션(Garbage Collection, GC)은 자바의 메모리 관리 방법 중 하나로 **JVM의 Heap 영역에서 동적으로 할당했던 메모리 중 필요 없게 된 메모리 객체(garbage)를 모아 주기적으로 제거하는 프로세스**를 말한다.","x":460,"y":-397,"width":754,"height":58},
		{"id":"531468359f520a87","type":"text","text":"C / C++ 에서는 이러한 가비지 컬렉션이 없어 프로그래머가 수동으로 메모리 할당과 해제를 일일이 해줘야 했었다.\n하지만 Java에서는 가비지 컬렉터가 메모리 관리를 대행해주기 때문에 Java 프로세스가 한정된 메모리를 효율적으로 사용할 수 있게 하고, **개발자 입장에서 메모리 관리, 메모리 누수(Memory Leak) 문제에 대해 관리하지 않아도 되어 개발에 집중할 수 있다는 장점**이 있다.","x":144,"y":-681,"width":632,"height":148},
		{"id":"69cdcbccc610b342","type":"text","text":"자동으로 처리해준다 해도 메모리가 언제 해제되는지 정확하게 알 수 없어 제어하기 힘들며, **가비지 컬렉션(GC)이 동작하는 동안에는 다른 동작을 멈추기 때문에 오버헤드가 발생되는 문제점**이 있다.\n\n이를 전문적인 용어로 **Stop-The-World**라 한다.\n\n이로 인해 **GC가 너무 자주 실행되면 소프트웨어 성능 하락의 문제**가 되기도 한다.\n예를 들면, IE는 이 가비지 컬렉션을 너무 자주 실행하여 성능 문제를 일으키는 것으로 악명이 높았다.\n\n이런 특성에 따라 실시간 성이 매우 강조되는 프로그램일 경우 GC에게 메모리를 맡기는 것은 맞지 않을 수 있다.\n따라서 애플리케이션 사용성을 유지하면서 효율적이게 GC를 실행하는 최적화 작업이 개발자의 숙제가 된다\n이러한 GC 최적화 작업을 **GC 튜닝**이라고 한다.","x":882,"y":-825,"width":757,"height":292},
		{"id":"8881f9c1ea063717","type":"file","file":"Java/JVM/STW(Stop The World).md","x":1860,"y":-411,"width":569,"height":145},
		{"id":"70970824d92d8855","type":"file","file":"Java/JVM/resources/Stop The World.png","x":1954,"y":-895,"width":382,"height":400},
		{"id":"6ceb7188b6505ed9","type":"text","text":"# Garbage Collector","x":-161,"y":-388,"width":305,"height":41},
		{"id":"45e3b0d99d0b9709","type":"file","file":"Java/JVM/resources/Unreachable Object.png","x":1946,"y":-140,"width":513,"height":221},
		{"id":"1b5caf9a31100229","type":"text","text":"가비지 컬렉션은 특정 객체가 garbage인지 아닌지 판단하기 위해서 도달성, 도달능력(Reachability)이라는 개념을 적용한다.\n객체에 레퍼런스가 있다면 Reachable로 구분되고, 객체에 유효한 레퍼런스가 없다면 Unreachable로 구분하고 수거해버린다.\n1. **Reachable**: 객체가 참조되고 있는 상태\n2. **Unreachable**: 객체가 참조되고 있지 않은 상태 (GC 대상이 됨)\n\n예를 들어, JVM 메모리에서는 객체들은 실질적으로 힙 영역에서 생성되고 메소드 영역이나 스택 영역에서는 영역에 생성된 객체의 주소만 참조하는 형식으로 구성된다.\n하지만 이렇게 생성된 힙 영역의 객체들이 메소드가 끝나는 등의 특정 이벤트들로 인하여 **힙 영역 객체의 메모리 주소를 가지고 있는 참조 변수가 삭제되는 현상이 발생하면, 힙 영역에서 어디서든 참조하고 있지 않은 객체(Unreachable)들이 발생**한다.\n이러한 객체들을 주기적으로 가비지 컬렉터가 제거해주는 것이다.","x":1261,"y":-218,"width":589,"height":377},
		{"id":"0a057899f7e06bde","type":"file","file":"Java/JVM/Mark And Sweep.md","x":537,"y":-140,"width":600,"height":1020},
		{"id":"82c370f33ddb3268","type":"file","file":"Java/JVM/GC의 Root Space.md","x":1262,"y":280,"width":941,"height":543,"color":"5"},
		{"id":"952469617b567d2a","type":"text","text":"![[가비지 컬렉션 동작 과정.png]]","x":-560,"y":-167,"width":972,"height":719},
		{"id":"0f96237946786ba0","type":"text","text":" JVM의 힙(heap) 영역은 동적으로 레퍼런스 데이터가 저장되는 공간으로서, 가비지 컬렉션에 대상이 되는 공간이다.\n\nHeap 영역은 처음 설계될 때 다음 2가지를 전제(Weak Generational Hypothesis)로 설계되었다.\n- 대부분의 객체는 금방 접근 불가능한 상태(Unreachable)가 된다.\n- 오래된 객체에서 새로운 객체로의 참조는 아주 적게 존재한다.\n\n즉, **객체는 대부분 일회성되며, 메모리에 오랫동안 남아있는 경우는 드물다**는 것이다.\n\n이러한 특성을 이용해 JVM 개발자들은 보다 효율적인 메모리 관리를 위해, 객체의 생존 기간에 따라 물리적인 Heap 영역을 나누게 되었고 **Young과 Old 총 2가지 영역**으로 설계하였다. (초기에는 Perm 영역도 존재하였지만 Java 8부터 제거되었다)\n\n![[JVM 힙 영역.png]]\n\n![[힙 영역 상세 2.png]]\n이렇게 하나의 힙 영역을 세부적으로 쪼갬으로서 객체의 생존 기간을 면밀하게 제어하여 GC를 보다 정확하게 불필요한 객체를 제거하는 프로세스를 실행하도록 한다.","x":-560,"y":823,"width":934,"height":1018},
		{"id":"d9c683ba6bbf53b2","type":"file","file":"Java/JVM/canvas/Young 영역(Young Generation).md","x":620,"y":940,"width":765,"height":205},
		{"id":"4ba13ee733bc919c","type":"file","file":"Java/JVM/canvas/Old 영역(Old Generation).md","x":620,"y":1240,"width":665,"height":171},
		{"id":"774dd808b323cc4a","type":"text","text":"- new를 통해 새로 생성된 객체가 위치한다.\n- 정기적인 쓰레기 수집 후 살아남은 객체들은 survivor 영역으로 보낸다.","x":1620,"y":908,"width":534,"height":64},
		{"id":"ec8c38efddc58ab8","type":"text","text":"- 최소 1번의 GC 이상 살아남은 객체가 존재하는 영역\n- Survivor 영역에는 Survivor 0 또는 Survivor 1 둘 중 하나는 꼭 비어 있어야 한다는 특별한 규칙이 있다.","x":1620,"y":1098,"width":423,"height":94},
		{"id":"4d831604295edca7","type":"text","text":"> [!INFO]\n> Old 영역이 Young 영역보다 크게 할당되는 이유는 Young 영역의 수명이 짧은 객체들은 큰 공간을 필요로 하지 않으며 큰 객체들은 Young 영역이 아니라 바로 Old 영역에 할당되기 때문이다.","x":-439,"y":1940,"width":693,"height":154,"color":"5"},
		{"id":"abc4943c2bd90bba","x":587,"y":1606,"width":933,"height":334,"type":"text","text":"Permanent는 직역하면 영구적인 세대의 의미로서, 생성된 객체들의 정보의 주소 값이 저장된 공간이다.\n\n클래스 로더에 의해 load되는 Class, Method 등에 대한 Meta 정보가 저장되는 영역이고 JVM에 의해 사용된다."}
	],
	"edges":[
		{"id":"5c1b1ca3881906d8","fromNode":"6ceb7188b6505ed9","fromSide":"right","toNode":"118349ead357f16c","toSide":"left","label":"가비지 컬렉션?"},
		{"id":"d3864b27bd2d6b23","fromNode":"118349ead357f16c","fromSide":"top","toNode":"531468359f520a87","toSide":"bottom","label":"장점"},
		{"id":"79eab14df4680378","fromNode":"118349ead357f16c","fromSide":"top","toNode":"69cdcbccc610b342","toSide":"bottom","label":"단점"},
		{"id":"e60606ddb28f6ab7","fromNode":"69cdcbccc610b342","fromSide":"right","toNode":"8881f9c1ea063717","toSide":"left","label":"Stop The World?"},
		{"id":"e58a4b2e55f2b9fe","fromNode":"8881f9c1ea063717","fromSide":"top","toNode":"70970824d92d8855","toSide":"bottom"},
		{"id":"bdc8587f5c243fdb","fromNode":"118349ead357f16c","fromSide":"right","toNode":"1b5caf9a31100229","toSide":"top","label":"가비지 컬렉션 대상은 어떻게?"},
		{"id":"9e1667d8d4bae125","fromNode":"118349ead357f16c","fromSide":"bottom","toNode":"0a057899f7e06bde","toSide":"top","label":"가비지 컬렉션 방식은?"},
		{"id":"7c49d5f67e09972e","fromNode":"0a057899f7e06bde","fromSide":"right","toNode":"82c370f33ddb3268","toSide":"left"},
		{"id":"c8a375b2e38bea18","fromNode":"1b5caf9a31100229","fromSide":"right","toNode":"45e3b0d99d0b9709","toSide":"left"},
		{"id":"061a7a369a299768","fromNode":"118349ead357f16c","fromSide":"bottom","toNode":"952469617b567d2a","toSide":"top"},
		{"id":"a6fe89f441fa607b","fromNode":"952469617b567d2a","fromSide":"bottom","toNode":"0f96237946786ba0","toSide":"top","label":"힙 영역"},
		{"id":"060ad270327dba8c","fromNode":"0f96237946786ba0","fromSide":"right","toNode":"d9c683ba6bbf53b2","toSide":"left","label":"Young 영역?"},
		{"id":"140dbaf3982df51e","fromNode":"0f96237946786ba0","fromSide":"right","toNode":"4ba13ee733bc919c","toSide":"left","label":"Old 영역?"},
		{"id":"4df5b745b316d537","fromNode":"0f96237946786ba0","fromSide":"bottom","toNode":"4d831604295edca7","toSide":"top"},
		{"id":"9e12a6d16db79d2b","fromNode":"d9c683ba6bbf53b2","fromSide":"right","toNode":"774dd808b323cc4a","toSide":"left","label":"Eden?"},
		{"id":"0444b17b487f2f77","fromNode":"d9c683ba6bbf53b2","fromSide":"right","toNode":"ec8c38efddc58ab8","toSide":"left","label":"survivor 0, 1?"},
		{"id":"80f543514ec3dbfe","fromNode":"0f96237946786ba0","fromSide":"right","toNode":"abc4943c2bd90bba","toSide":"left"}
	]
}