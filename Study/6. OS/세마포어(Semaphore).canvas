{
	"nodes":[
		{"id":"bca960ef52500a51","type":"file","file":"Study/6. OS/md/세마포어(Semaphore).md","x":-360,"y":-277,"width":640,"height":220},
		{"id":"d74281a2638e7733","type":"text","text":"- 세마포어는 정수 값을 갖는 변수로 3가지 연산(primitive)으로 접근\n\t- 세마포어 초기화: 세마포어 값을 음이 아닌 값으로 초기화\n\t- semWait 연산(P 연산) -> 원자적(atomic) 수행\n\t\t- 세마포어 값을 감소\n\t\t- 감소된 값이 음수이면 호출한 프로세스는 블록된다. 음수가 아니면 프로셋는 계속 수행될 수 있다.\n\t- semSignal 연산(V 연산) -> 원자적(atomic) 수행\n\t\t- 세마포어 값을 증가\n\t\t- 증가된 값이 양수가 아니면 블록된 프로세스를 깨운다.","x":-420,"y":-740,"width":761,"height":261},
		{"id":"27d7e57dda16bc65","x":-716,"y":-1120,"width":593,"height":154,"type":"file","file":"Study/6. OS/md/semWait(x) 연산 (P 연산).md"},
		{"id":"88c0a5eb54d8dec4","x":27,"y":-1120,"width":515,"height":154,"type":"file","file":"Study/6. OS/md/semSignal(x) 연산 (V 연산).md"},
		{"id":"0abee1598187bda0","type":"text","text":"- 범용 세마포어\n- 이진 세마포어\n- 뮤텍스","x":449,"y":-167,"width":187,"height":96},
		{"id":"16eadbe9bcc39edc","type":"text","text":"- 프로세스가 블록될지 여부를 세마포어를 감소시키기 전까지 알 수 없다  \n- 세마포어를 증가시켜 블록상태를 해제할 경우, 블록 되어 있는 프로세스가 복수개이면 어떤 프로세스가 즉시 수행될 지 알 수 없다.\n- 세마포어 시그널을 보낼 때 블록 중인 다른 프로세스가 존재하는지 알 필요가 없다.","x":523,"y":-605,"width":606,"height":126},
		{"id":"ce254d8d55e43646","x":827,"y":-384,"width":667,"height":368,"type":"file","file":"Study/6. OS/md/범용 세마포어.md"},
		{"id":"97b71d4aeb70d226","x":827,"y":394,"width":686,"height":250,"type":"file","file":"Study/6. OS/md/뮤텍스.md"},
		{"id":"ae236c5c416d9c15","x":827,"y":48,"width":535,"height":254,"type":"file","file":"Study/6. OS/md/이진 세마포어.md"},
		{"id":"9fc3ab50afd72ec0","x":-343,"y":175,"width":608,"height":311,"type":"text","text":"1. 자기 프로세스 내에서 P, V 연산을 모두 갖는 경우\n\t1. 특정 자원(임계영역)을 한 순간에 혼자 독점적으로 사용할 경우\n2. 한 프로세스 내에서 P연산만, 다른 프로세스 내에서 V연산만 사용하는 경우\n\t1. 특정 자원(임계영역)을 서로 공유하면서 처리가 되는 경우\n\t2. 세마포어의 상호배제를 위한 가장 일반적인 활용법\n\t\t1. 동일 임계자원을 동시에 사용 못하게 하는 구조\n\t3. 동기화를 할 경우 많이 사용\n\t\t1. A 프로세스가 특정 자원(임계영역)을 처리한 후 그 결과를 가지고 B 프로세스가 실행되어야 하는 경우에, B가 P연산을 하고 기다리면 A가 특정자원(임계영역)을 처리한 후 V 연산을 실시하여 B가 계속 진행되게 한다."},
		{"id":"f91dc2f88e3d2de2","x":349,"y":422,"width":250,"height":64,"type":"text","text":"- 강성 세마포어\n- 약성 세마포어"},
		{"id":"89af6a06487dc4d7","x":543,"y":713,"width":413,"height":151,"type":"file","file":"Study/6. OS/md/약성 세마포어.md"},
		{"id":"90ec84927363723e","x":-31,"y":713,"width":445,"height":154,"type":"file","file":"Study/6. OS/md/강성 세마포어.md"},
		{"id":"1246d4d8c095f025","x":1609,"y":492,"width":551,"height":152,"type":"text","text":"만약 다른 스레드가 Lock을 소유하고 있다면 그 Lock이 반환될 때까지 계속 확인하며 기다리는 것\n\n- 조금만 기다리면 바로 쓸 수 있는데 굳이 Context Switching으로 부하를 줄 필요가 있나? 라는 컨셉으로 개발된 것"},
		{"id":"b68a29cc6c06852d","x":1578,"y":760,"width":613,"height":374,"type":"text","text":"- Lock을 얻을 수 없다면, 계속해서 Lock을 확인하며 얻을 때까지 기다린다.  \n    이른바 바쁘게 기다리는 busy waiting이다.\n- 바쁘게 기다린다는 것은 무한 루프를 돌면서 최대한 다른 스레드에게 CPU를 양보하지 않는 것이다.\n- **Lock이 곧 사용가능해질 경우 Context Switching을 줄여 CPU의 부담을 덜어준다.  \n    하지만, 만약 어떤 스레드가 Lock을 오랫동안 유지한다면 오히려 CPU 시간을 많이 소모할 가능성이 있다.**\n- 하나의 CPU나 하나의 코어만 있는 경우에는 유용하지 않다.  \n    그 이유는 만약 다른 스레드가 Lock을 가지고 있고 그 스레드가 Lock을 풀어 주려면 싱글 CPU 사용률 100%를 만드는 상황이 발생하므로 주의해야한다.  \n    스핀락은 기본적으로 무한 for루프를 돌면서 lock을 기다리므로 하나의 스레드가 lock을 오랫동안 가지고 있다면, 다른 Blocking된 스레드는 busy waiting을 하므로 CPU를 쓸데없이 낭비하게 된다."}
	],
	"edges":[
		{"id":"9a6a9649df0fa492","fromNode":"bca960ef52500a51","fromSide":"top","toNode":"d74281a2638e7733","toSide":"bottom","label":"연산"},
		{"id":"4bb9e2712361d828","fromNode":"bca960ef52500a51","fromSide":"right","toNode":"16eadbe9bcc39edc","toSide":"left","label":"특징"},
		{"id":"33386acda06c12c5","fromNode":"bca960ef52500a51","fromSide":"right","toNode":"0abee1598187bda0","toSide":"left","label":"분류"},
		{"id":"1deba18147d34a6f","fromNode":"0abee1598187bda0","fromSide":"right","toNode":"ce254d8d55e43646","toSide":"left"},
		{"id":"6bdbf6a63029e48b","fromNode":"0abee1598187bda0","fromSide":"right","toNode":"ae236c5c416d9c15","toSide":"left"},
		{"id":"cbecc468a95a4571","fromNode":"0abee1598187bda0","fromSide":"right","toNode":"97b71d4aeb70d226","toSide":"left"},
		{"id":"6453266907fc92f1","fromNode":"bca960ef52500a51","fromSide":"right","toNode":"f91dc2f88e3d2de2","toSide":"top","label":"분류"},
		{"id":"c6b76d959f0a28fc","fromNode":"f91dc2f88e3d2de2","fromSide":"bottom","toNode":"90ec84927363723e","toSide":"top"},
		{"id":"6e0e79c539a86d20","fromNode":"f91dc2f88e3d2de2","fromSide":"bottom","toNode":"89af6a06487dc4d7","toSide":"top"},
		{"id":"ce6921f7fb57153e","fromNode":"d74281a2638e7733","fromSide":"top","toNode":"27d7e57dda16bc65","toSide":"bottom"},
		{"id":"7edfef83edf2bbcc","fromNode":"d74281a2638e7733","fromSide":"top","toNode":"88c0a5eb54d8dec4","toSide":"bottom"},
		{"id":"bc4aba5664ce4c0b","fromNode":"bca960ef52500a51","fromSide":"bottom","toNode":"9fc3ab50afd72ec0","toSide":"top","label":"활용 방법"},
		{"id":"d2257c4e636dd6ad","fromNode":"97b71d4aeb70d226","fromSide":"right","toNode":"1246d4d8c095f025","toSide":"left"},
		{"id":"5f011a53ab948a72","fromNode":"1246d4d8c095f025","fromSide":"bottom","toNode":"b68a29cc6c06852d","toSide":"top","label":"특성"}
	]
}