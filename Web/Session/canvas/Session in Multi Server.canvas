{
	"nodes":[
		{"id":"42a5762343f26cb1","type":"text","text":"# Session in Multi Server","x":-560,"y":-259,"width":334,"height":39},
		{"id":"2e8bba703a9c0bfc","type":"text","text":"세션은 서버 1대에 하나의 저장소가 형성된다.\n나누어진 세션 저장소에 대한 별도의 처리가 없다면 각각의 세션들은 정합성 이슈를 발생시킨다.\n\n![[Session per WAS.png]]\n때문에 여러 대로 나뉜 서버가 하나의 서비스를 운영하기 위해서는 4개의 분리된 세션을 하나의 시스템처럼 동작하게 하거나, 고정된 세션을 사용해야 한다.","x":120,"y":-500,"width":560,"height":528},
		{"id":"e5462ca6ce8d8e8e","type":"text","text":"Sticky Session이란 말 그대로 고정된 세션을 의미한다.\n![[Sticky Session.png]]\n\n예를 들어, User1이 1번부터 3번까지의 서버 중 1번 서버에 세션을 생성했다면, 이후에 User1이 보내는 모든 요청은 1번 서버로만 보내지게 된다. 즉, Load Balancer는 User가 첫 번째 세션을 생성한 서버로 모든 요청을 리다이렉트하여 고정된 세션만 사용하게 한다.\n\n이를 위해서 로드 밸런서는 요청을 받으면 가장 먼저 요청에 쿠키가 존재하는지 확인한다.\n쿠키가 있으면 해당 요청이 쿠키에 지정된 서버로 전송된다.\n쿠키가 없는 경우에는 로드 밸런서가 기존 로드 밸런싱 알고리즘을 기반으로 서버를 선정한다.\n\n동일한 사용자가 계속 해당 서버에 요청을 보낼 수 있도록 지속적으로 서버 정보가 쿠키를 통해 응답에 삽입되어 보내진다.\n\n이러한 방식을 사용하면 유저는 세션이 유지되는 동안 동일한 서버만을 사용하기 때문에 정합성 이슈에서 자유로워질 수 있다.","x":1040,"y":-1278,"width":660,"height":712},
		{"id":"ed1f565c95f83647","type":"text","text":"하지만 이 방식에도 단점이 존재한다.\n\n먼저, 고정된 세션을 사용한다는 것은 특정 서버에 트래픽이 집중될 위험이 있다.\n사용자가 접속해야 하는 서버가 정해져 있기 때문에 하나의 서버에 트래픽이 집중되어 있더라도 사용자는 자신의 세션이 없는 다른 서버를 사용할 수 없다.\n\n![[Sticky Session Problem.png]]\n또 위 그림을 보면 서비스 중에 하나의 서버에 장애가 발생하게 되면 해당 서버를 사용하는 사용자들은 세션 정보를 잃어버리게 된다. -> 가용성이 떨어진다.\n\nSticky Session을 사용하면 정합성 이슈를 해결할 수 있지만 스케일 아웃의 장점인 가용성과 트래픽 분산을 완벽히 사용할 수는 없다.","x":1920,"y":-1246,"width":566,"height":648},
		{"id":"4911a35e1853227e","type":"text","text":"여러 대의 컴퓨터들이 연결되어 하나의 시스템처럼 동작하도록 만드는 것을 클러스터링이라고 한다.\n서버 또한 컴퓨터로서 여러 대가 하나의 서비스를 하기 위해서는 클러스터링이 필요하다.\n\n- Tomcat 9.0 Document  \n    [http://tomcat.apache.org/tomcat-9.0-doc/cluster-howto.html](http://tomcat.apache.org/tomcat-9.0-doc/cluster-howto.html)\n\t- 첨부된 Tomcat 9.0 Document를 보면 톰캣이 세션 클러스터링을 구현하는 방법으로 `DeltaManager`를 사용하여 all-to-all 세션 복제 방식을 제안한다.","x":1040,"y":-438,"width":724,"height":404},
		{"id":"d01ca641c99f9608","type":"text","text":"all-to-all 세션 복제란 하나의 세션 저장소에 변경되는 요소가 발생하면 변경된 사항이 다른 모든 세션에 복제가 된다는 것을 말한다.\n![[all-to-all session replication.png]]\n위 그림과 같이 세션을 복제한다면 유저가 이후에 어떤 서버에 접속하더라도 로그인 정보가 세션에 복제되어 있으므로 정합성 이슈를 해결할 수 있다.\n이로써 서버 하나에 장애가 발생하더라도 서비스는 중단되지 않고 운영이 가능하다.","x":2100,"y":-438,"width":580,"height":640},
		{"id":"312f092453d8b904","x":2820,"y":-378,"width":578,"height":220,"type":"text","text":"하지만 Tomcat의 all-to-all 세션 복제 방식은 고려해야 할 단점들이 존재한다.\n\n우선, 모든 서버가 동일한 세션 객체를 가져야 하기 때문에 **많은 메모리가 필요**하다.\n또한 세션 저장소에 데이터가 저장될 때마다 모든 서버에 값을 입력해야하므로 **서버 수에 비례하여 네트워크 트래픽이 증가하는 등 성능 저하가 발생**하게 된다.\n\n그러므로 해당 방식은 **소규모 클러스터에서 좋은 효율을 보여준다**. **4개 이상의 서버를 가진 대규모 클러스터들에는 추천하지 않는 방식**이다."},
		{"id":"a863b5e70815e4cc","x":1059,"y":140,"width":641,"height":340,"type":"text","text":""},
		{"id":"d7d85387efaa06af","x":2760,"y":-12,"width":698,"height":429,"type":"text","text":""}
	],
	"edges":[
		{"id":"14262ed411618757","fromNode":"42a5762343f26cb1","fromSide":"right","toNode":"2e8bba703a9c0bfc","toSide":"left","label":"세션의 정합성 이슈"},
		{"id":"b6b2ddd2c204cf06","fromNode":"2e8bba703a9c0bfc","fromSide":"right","toNode":"e5462ca6ce8d8e8e","toSide":"left","label":"Sticky Session"},
		{"id":"86dddb7a3920d08c","fromNode":"e5462ca6ce8d8e8e","fromSide":"right","toNode":"ed1f565c95f83647","toSide":"left","label":"단점"},
		{"id":"67da05939e94a4f5","fromNode":"2e8bba703a9c0bfc","fromSide":"right","toNode":"4911a35e1853227e","toSide":"left","label":"세션 클러스터링"},
		{"id":"b9e794482c191879","fromNode":"4911a35e1853227e","fromSide":"right","toNode":"d01ca641c99f9608","toSide":"left","label":"All-to-all Session Replication?"},
		{"id":"de45e9f3ccf33b97","fromNode":"d01ca641c99f9608","fromSide":"right","toNode":"312f092453d8b904","toSide":"left","label":"단점"},
		{"id":"fa4c3a5e42fe924a","fromNode":"2e8bba703a9c0bfc","fromSide":"right","toNode":"a863b5e70815e4cc","toSide":"left"},
		{"id":"93a8d8b3b4cfc80e","fromNode":"312f092453d8b904","fromSide":"bottom","toNode":"d7d85387efaa06af","toSide":"top"}
	]
}