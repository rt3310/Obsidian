{
	"nodes":[
		{"id":"d0f587a5cdd6f883","type":"file","file":"HttpSession/Cookie vs Session.md","x":115,"y":-340,"width":683,"height":500},
		{"id":"c1b716067f3e1670","type":"text","text":"# Cookie & Session","x":-560,"y":-120,"width":300,"height":62},
		{"id":"2ac784ac67abaacd","type":"text","text":"HTTP 프로토콜의 특성이자 약점을 보완하기 위해 쿠키 또는 세션을 사용한다.","x":-410,"y":-360,"width":330,"height":78},
		{"id":"7404354a3ac920f2","type":"text","text":"기본적으로 HTTP 프로토콜 환경은 **Connectionless**, **Stateless**한 특성을 가지기 때문에 서버는 클라이언트가 누구인지 매번 확인해야 한다.","x":-226,"y":-560,"width":406,"height":98},
		{"id":"b68cb75bbeef07ae","type":"file","file":"HttpSession/Connectionless.md","x":-633,"y":-1080,"width":553,"height":320},
		{"id":"bd6476397f2f8f85","type":"file","file":"HttpSession/Stateless.md","x":40,"y":-1088,"width":571,"height":328},
		{"id":"fda6299042e107c6","type":"text","text":"- 클라이언트(브라우저) 로컬에 저장되는 키와 값이 들어있는 작은 데이터 파일\n- 사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다는 특징이 있다.\n- 쿠키는 클라이언트의 상태 정보를 로컬에 저장했다가 참조한다.\n- 클라이언트에 300개 까지 쿠키 저장 가능, 하나의 도메인당 20개의 값만 가질 수 있음, 하나의 쿠키 값은 4KB까지 저장 가능하다.\n- Response-Header에 Set-Cookie 속성을 사용하면 클라이언트에 쿠키를 만들 수 있다.\n- 쿠키는 사용자가 따로 요청하지 않아도 브라우저가 Request 시에 Request Header를 넣어서 자동으로 서버에 전송한다.","x":-391,"y":239,"width":910,"height":200},
		{"id":"7a0d8d09cc47b2fd","type":"text","text":"- 이름: 각각의 쿠키를 구별하는 데 사용되는 이름\n- 값: 쿠키의 이름과 관련된 값\n- 유효시간: 쿠키의 유지시간\n- 도메인: 쿠키를 전송할 도메인\n- 경로: 쿠키를 전송할 요청 경로","x":-425,"y":652,"width":399,"height":168},
		{"id":"0308a17e3970e648","type":"text","text":"1. 클라이언트가 페이지를 요청\n2. 서버에서 쿠키를 생성\n3. HTTP 헤더에 쿠키를 포함시켜 응답\n4. 브라우저가 종료되어도 쿠키 만료 기간이 있다면 클라이언트에서 보관하고 있다.\n5. 같은 요청을 할 경우 HTTP 헤더에 쿠키를 함께 보냄\n6. 서버에서 쿠키를 읽어 이전 상태 정보를 변경할 필요가 있을 때 쿠키를 업데이트 하여 변경된 쿠키를 HTTP 헤더에 포함시켜 응답","x":180,"y":613,"width":552,"height":263},
		{"id":"8cef7ffa4c34e21c","type":"text","text":"1. 클라이언트가 서버에 접속 시 세션 ID를 발급 받는다.\n2. 클라이언트는 세션 ID에 대해 쿠키를 사용해서 저장하고 가지고 있다.\n3. 클라이언트는 서버에 요청할 때, 이 쿠키의 세션 ID를 같이 서버에 전달해서 요청한다.\n4. 서버는 세션 ID를 전달받아서 별다른 작업없이 세션 ID로 세션에 있는 클라이언트 정보를 가져와서 사용한다.\n5. 클라이언트 정보를 가지고 서버 요청을 처리하여 클라이언트에게 응답한다.","x":-1786,"y":696,"width":781,"height":180},
		{"id":"909cfa781fec5233","type":"text","text":"- 각 클라이언트에게 고유 ID를 부여\n- 세션 ID로 클라이언트를 구분해서 클라이언트의 요구에 맞는 서비스를 제공\n- 보안 면에서 쿠키보다 우수\n- 사용자가 많아질수록 서버 메모리를 많이 차지하게 된다.","x":-911,"y":700,"width":451,"height":176},
		{"id":"52593154c71453a3","type":"text","text":"쿠키는 클라이언트 로컬에 저장되기 때문에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해서 sessionid만 저장하고 그것으로 구분해서 서버에서 처리하기 때문에 비교적 보안성이 좋다.","x":456,"y":-615,"width":565,"height":111},
		{"id":"645c29da4564f337","type":"text","text":"세션은 서버의 자원을 사용하기 때문에 무분별하게 만들다보면 서버의 메모리가 감당할 수 없어질 수가 있고 속도가 느려질 수 있기 때문에 쿠키가 유리한 경우가 있다.","x":1040,"y":-300,"width":429,"height":97},
		{"id":"3fc523b90e538b69","type":"text","text":"- 캐시는 이미지나 css, js 파일 등을 브라우저나 서버 앞 단에 저장해놓고 사용하는 것이다.\n- 한번 캐시에 저장되면 브라우저를 참고하기 때문에 서버에서 변경이 되어도 사용자는 변경되지 않게 보일 수 있는데 이런 부분을 캐시를 지워주거나 서버에서 클라이언트로 응답을 보낼 때 header에 캐시 만료시간을 명시하는 방법 등을 이용할 수 있다.\n- 보통 쿠키와 세션의 차이를 물어볼 때 저장위치와 보안에 대해서는 잘 말하는데 사실 중요한 것은 라이프 사이클을 얘기하는 것이다.","x":1021,"y":-100,"width":664,"height":195},
		{"id":"c4d4dce4412cb165","type":"file","file":"Resources/Cookie.png","x":-911,"y":-406,"width":400,"height":170},
		{"id":"404454cdbbc81977","type":"text","text":"- 세션을 쿠키를 기반하고 있지만, 사용자 정보 파일을 브라우저에 저장하는 쿠키와 달리 세션을 서버 측에서 관리한다.\n- 서버에서는 클라이언트를 구분하기 위해 세션 ID를 부여하며 웹 브라우저가 서버에 접속해서 브라우저를 종료할 때까지 인증상태를 유지한다.\n\t- 물론 접속 시간에 제한을 두어 일정 시간 응답이 없다면 정보가 유지되지 않게 설정이 가능하다.\n- 사용자에 대한 정보를 서버에 두기 때문에 쿠키보다 보안에 좋지만, 사용자가 많아질수록 서버 메모리를 많이 차지하게 된다.\n- 즉 동접자 수가 많은 웹사이트인 경우 서버에 과부하를 주게 되므로 성능 저하의 요인이 된다.\n- 클라이언트가 Request를 보내면, 해당 서버의 엔진이 클라이언트에게 유일한 ID를 부여하는데 이것이 세션 ID이다.","x":-1540,"y":246,"width":980,"height":193}
	],
	"edges":[
		{"id":"708135ebc0fa1e42","fromNode":"c1b716067f3e1670","fromSide":"top","toNode":"2ac784ac67abaacd","toSide":"bottom","label":"사용 이유"},
		{"id":"7fd313b4d2ce1509","fromNode":"2ac784ac67abaacd","fromSide":"top","toNode":"7404354a3ac920f2","toSide":"bottom","label":"HTTP 특성?"},
		{"id":"d0162cd5cb996ee7","fromNode":"7404354a3ac920f2","fromSide":"top","toNode":"b68cb75bbeef07ae","toSide":"bottom","label":"Connectionless?"},
		{"id":"588ed2986e681e89","fromNode":"7404354a3ac920f2","fromSide":"top","toNode":"bd6476397f2f8f85","toSide":"bottom","label":"Stateless?"},
		{"id":"83c485d9515ea35c","fromNode":"c1b716067f3e1670","fromSide":"bottom","toNode":"fda6299042e107c6","toSide":"top","label":"Cookie?"},
		{"id":"cc64624cc772b858","fromNode":"fda6299042e107c6","fromSide":"bottom","toNode":"7a0d8d09cc47b2fd","toSide":"top","label":"구성 요소"},
		{"id":"25e5e88743cb3810","fromNode":"fda6299042e107c6","fromSide":"bottom","toNode":"0308a17e3970e648","toSide":"top","label":"동작 방식"},
		{"id":"096d6e0300606431","fromNode":"c1b716067f3e1670","fromSide":"bottom","toNode":"404454cdbbc81977","toSide":"top","label":"Session?"},
		{"id":"bf84c0256a0ed550","fromNode":"404454cdbbc81977","fromSide":"bottom","toNode":"8cef7ffa4c34e21c","toSide":"top","label":"동작 방식"},
		{"id":"612cec76c7929746","fromNode":"404454cdbbc81977","fromSide":"bottom","toNode":"909cfa781fec5233","toSide":"top","label":"특징"},
		{"id":"af50bff05fdd7206","fromNode":"c1b716067f3e1670","fromSide":"right","toNode":"d0f587a5cdd6f883","toSide":"left","label":"Cookie vs Session"},
		{"id":"7873f4cec45592f0","fromNode":"d0f587a5cdd6f883","fromSide":"top","toNode":"52593154c71453a3","toSide":"bottom","label":"왜 세션이 보안이 더 우수한가?"},
		{"id":"2e84bc4b3800df1a","fromNode":"d0f587a5cdd6f883","fromSide":"right","toNode":"645c29da4564f337","toSide":"left","label":"왜 쿠키를 사용할까?"},
		{"id":"64e525d44a8e2979","fromNode":"d0f587a5cdd6f883","fromSide":"right","toNode":"3fc523b90e538b69","toSide":"left","label":"vs 캐시"}
	]
}